openapi: 3.0.3
info:
  title: Inventory API
  description: This is a sample inventory management server based on the OpenAPI 3.0
    specification
  license:
    name: MIT License
    url: https://mit-license.org
  version: 1.0.0
servers:
- url: /
tags:
- name: item
  description: Access your inventory items
- name: category
  description: Access your item categories
- name: container
  description: Access your item containers
paths:
  /item:
    get:
      tags:
      - item
      summary: Get all items from the inventory
      operationId: getItem
      responses:
        "200":
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllItems'
    post:
      tags:
      - item
      summary: Add a new item to the inventory
      operationId: addItem
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemData'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ItemData'
        required: true
      responses:
        "200":
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemID'
        "400":
          description: Invalid input
        "422":
          description: Validation exception
  /item/{id}:
    get:
      tags:
      - item
      summary: Get an item by ID
      operationId: getItemById
      parameters:
      - name: id
        in: path
        description: Item ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        "400":
          description: Invalid ID supplied
        "404":
          description: Item not found
    put:
      tags:
      - item
      summary: Update an item
      operationId: putItemById
      parameters:
      - name: id
        in: path
        description: Item ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Operation successful
        "400":
          description: Invalid ID supplied
        "404":
          description: Item not found
    delete:
      tags:
      - item
      summary: Delete an item
      operationId: deleteItem
      parameters:
      - name: id
        in: path
        description: Item ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Operation successful
        "400":
          description: Invalid ID supplied
        "404":
          description: Item not found
  /category:
    get:
      tags:
      - category
      summary: Get all categories
      operationId: getCategories
      responses:
        "200":
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllCategories'
        "400":
          description: Invalid ID supplied
        "404":
          description: Category not found
        "422":
          description: Validation exception
    post:
      tags:
      - category
      summary: Create a new item category
      operationId: addCategory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryData'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CategoryData'
        required: true
      responses:
        "200":
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryID'
        "400":
          description: Invalid input
        "422":
          description: Validation exception
  /category/{id}:
    get:
      tags:
      - category
      summary: Get a category by ID
      operationId: getCategoryById
      parameters:
      - name: id
        in: path
        description: Category ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        "400":
          description: Invalid ID supplied
        "404":
          description: Category not found
    put:
      tags:
      - category
      summary: Update a category
      operationId: putCategoryById
      parameters:
      - name: id
        in: path
        description: Category ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Operation successful
        "400":
          description: Invalid ID supplied
        "404":
          description: Category not found
    delete:
      tags:
      - category
      summary: Delete a category
      operationId: deleteCategory
      parameters:
      - name: id
        in: path
        description: Category ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Operation successful
        "400":
          description: Invalid ID supplied
        "404":
          description: Item not found
  /container:
    get:
      tags:
      - container
      summary: Get all item containers
      operationId: getContainers
      responses:
        "200":
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllContainers'
        "400":
          description: Invalid ID supplied
        "404":
          description: Container not found
        "422":
          description: Validation exception
    post:
      tags:
      - container
      summary: Register a new item container
      operationId: addContainer
      responses:
        "200":
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerID'
        "400":
          description: Invalid input
        "422":
          description: Validation exception
  /container/{id}:
    get:
      tags:
      - container
      summary: Get a container by ID
      operationId: getContainerById
      parameters:
      - name: id
        in: path
        description: Container ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Container'
        "400":
          description: Invalid ID supplied
        "404":
          description: Container not found
    put:
      tags:
      - container
      summary: Update a container
      operationId: putContainerById
      parameters:
      - name: id
        in: path
        description: Container ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Operation successful
        "400":
          description: Invalid ID supplied
        "404":
          description: Container not found
    delete:
      tags:
      - container
      summary: Delete a container
      operationId: deleteContainer
      parameters:
      - name: id
        in: path
        description: Container ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Operation successful
        "400":
          description: Invalid ID supplied
        "404":
          description: Item not found
components:
  schemas:
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
    Category:
      required:
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 0
        name:
          type: string
          example: Grains
      example:
        name: Grains
        id: 0
      xml:
        name: category
    CategoryID:
      type: object
      properties:
        categoryId:
          type: integer
          format: int32
          example: 0
      example:
        categoryId: 0
      xml:
        name: categoryId
    CategoryData:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          example: Grains
      xml:
        name: category
    AllCategories:
      type: array
      example:
      - id: 0
        name: Grains
      - id: 1
        name: Spices
      items:
        $ref: '#/components/schemas/Category'
      x-schema-name: AllCategories
    Container:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 0
        itemCount:
          type: integer
          format: int64
          example: 0
      example:
        id: 0
        itemCount: 0
      xml:
        name: container
    ContainerID:
      type: object
      properties:
        containerId:
          type: integer
          format: int32
          example: 0
      example:
        containerId: 0
      xml:
        name: containerId
    ContainerData:
      type: object
      properties:
        itemCount:
          type: integer
          format: int64
          example: 0
      xml:
        name: container
    AllContainers:
      type: array
      example:
      - id: 0
        itemCount: 23
      - id: 1
        itemCount: 804
      items:
        $ref: '#/components/schemas/Container'
      x-schema-name: AllContainers
    Item:
      required:
      - containerId
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 0
        name:
          type: string
          example: Wild Rice
        description:
          type: string
          example: 5 Kilograms
        categoryId:
          type: integer
          format: int64
          example: 0
        containerId:
          type: integer
          format: int64
          example: 0
      example:
        name: Wild Rice
        description: 5 Kilograms
        id: 0
        containerId: 0
        categoryId: 0
      xml:
        name: item
    ItemID:
      type: object
      properties:
        itemId:
          type: integer
          format: int32
          example: 0
      example:
        itemId: 0
      xml:
        name: itemId
    ItemData:
      required:
      - containerId
      - name
      type: object
      properties:
        name:
          type: string
          example: Wild Rice
        description:
          type: string
          example: 5 Kilograms
        categoryId:
          type: integer
          format: int64
          example: 0
        containerId:
          type: integer
          format: int64
          example: 0
      xml:
        name: item
    AllItems:
      type: array
      example:
      - id: 0
        name: Wild Rice
        description: 5 Kilograms
        categoryId: 0
        containerId: 0
      - id: 1
        name: Jasmin Rice
        description: 10 Kilograms
        categoryId: 0
        containerId: 1
      items:
        $ref: '#/components/schemas/Item'
      x-schema-name: AllItems
